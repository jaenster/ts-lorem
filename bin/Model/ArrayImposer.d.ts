export default class ArrayImposer<T> implements ArrayLike<T>, Array<T> {
    private innerArray;
    length: number;
    push(...args: any[]): any;
    pop(...args: any[]): any;
    [n: number]: T;
    [Symbol.iterator](): IterableIterator<T>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    concat(...items: ConcatArray<T>[]): T[];
    concat(...items: (ConcatArray<T> | T)[]): T[];
    copyWithin(target: number, start: number, end?: number): this;
    entries(): IterableIterator<[number, T]>;
    every(callbackfn: <T>(value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    fill(value: T, start?: number, end?: number): this;
    filter<S extends T>(callbackfn: <T>(value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
    filter(callbackfn: <T>(value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];
    find<S extends T>(predicate: <T>(this: void, value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: <T>(value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;
    findIndex(predicate: <T>(value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;
    flat<U>(depth: 7): U[];
    flat<U>(depth: 6): U[];
    flat<U>(depth: 5): U[];
    flat<U>(depth: 4): U[];
    flat<U>(depth: 3): U[];
    flat<U>(depth: 2): U[];
    flat<U>(depth?: 1): U[];
    flat<U>(depth: 0): U[];
    flat<U>(depth?: number): any[];
    flatMap<U, This = undefined>(callback: <T>(this: This, value: T, index: number, array: T[]) => (ReadonlyArray<U> | U), thisArg?: This): U[];
    forEach(callbackfn: <T>(value: T, index: number, array: T[]) => void, thisArg?: any): void;
    includes(searchElement: T, fromIndex?: number): boolean;
    indexOf(searchElement: T, fromIndex?: number): number;
    join(separator?: string): string;
    keys(): IterableIterator<number>;
    lastIndexOf(searchElement: T, fromIndex?: number): number;
    map<U>(callbackfn: <T>(value: T, index: number, array: T[]) => U, thisArg?: any): U[];
    reduce(callbackfn: <T>(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduce(callbackfn: <T>(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduce<U>(callbackfn: <T>(previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    reduceRight(callbackfn: <T>(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;
    reduceRight(callbackfn: <T>(previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;
    reduceRight<U>(callbackfn: <T>(previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;
    reverse(): T[];
    shift(): T | undefined;
    slice(start?: number, end?: number): T[];
    some(callbackfn: <T>(value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;
    sort(compareFn?: <T>(a: T, b: T) => number): this;
    splice(start: number, deleteCount?: number): T[];
    splice(start: number, deleteCount: number, ...items: T[]): T[];
    unshift(...items: T[]): number;
    values(): IterableIterator<T>;
    toJSON(): object;
}
